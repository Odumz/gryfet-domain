// 'use strict';

// Constants
const express = require('express');
// import express, { json, urlencoded } from 'express';
const swaggerUi = require('swagger-ui-express');
const swaggerJsDoc = require('swagger-jsdoc');
const cors = require('cors');
const logger = require('./api/utils/helpers');
const morgan = require('morgan');
const dotenv = require('dotenv').config();
const routes = require('./api/routes');


const PORT = process.env.OCX_PORT_DOMAIN || 55502;

const options = {
  // List of files to be processed. You can also set globs './routes/*.js'
  apis: ['./server.js', './api/routes/*js'],
  basePath: '/',
  swaggerDefinition: {
    // Like the one described here: https://swagger.io/specification/#infoObject
    info: {
      openapi: '3.0.1',
      description: 'OCX Domain API with autogenerated swagger doc',
      swagger: '3.0',
      title: 'ocx domain',
      contact: {
        name: "odumosu oluwashina",
        email: "oluwashinaodumosu@gmail.com"
      },
      servers: ["http://localhost:55502"],
      version: '1.0.0',
    },
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'apiKey',
          in: 'header',
          description: 'JWT authorization of an API',
          name: 'Authorization',
          bearerFormat: 'JWT'
        }
      }
    }
  },
};

const specs = swaggerJsDoc(options);

const app = express();

// Middleware
app.use(cors());
app.use(json());
app.use(urlencoded({extended: false}));
app.use(morgan('combined', { stream: logger.stream }));
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(specs));

app.disable('x-powered-by');

const HOST = '0.0.0.0';

/**
 * @swagger
 * /:
 *  get:
 *    description: Use to test if app is working
 *    responses:
 *      '200':
 *        description: A successful response
 */
app.get('/', (req, res) => {
  res.status(200).send('Welcome to OCX:Domain');
});
app.use('/domain/v1', routes);
app.use('*', (req, res) => {
  res.status(404).send('Not Found');
});


try {
  app.listen(PORT, HOST, async () => {
    logger.info(`Running on http://${HOST}:${PORT}`);
  });
} catch (e) {
  console.error(e);
};

module.exports = app;